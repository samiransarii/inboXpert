// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: ml_service.proto

package ml_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailPrediction_CategorizeEmail_FullMethodName      = "/inboxpert.ml.service.EmailPrediction/CategorizeEmail"
	EmailPrediction_BatchCategorizeEmail_FullMethodName = "/inboxpert.ml.service.EmailPrediction/BatchCategorizeEmail"
)

// EmailPredictionClient is the client API for EmailPrediction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailPredictionClient interface {
	CategorizeEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	BatchCategorizeEmail(ctx context.Context, in *BatchEmailRequest, opts ...grpc.CallOption) (*BatchCategoryResponse, error)
}

type emailPredictionClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailPredictionClient(cc grpc.ClientConnInterface) EmailPredictionClient {
	return &emailPredictionClient{cc}
}

func (c *emailPredictionClient) CategorizeEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, EmailPrediction_CategorizeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailPredictionClient) BatchCategorizeEmail(ctx context.Context, in *BatchEmailRequest, opts ...grpc.CallOption) (*BatchCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCategoryResponse)
	err := c.cc.Invoke(ctx, EmailPrediction_BatchCategorizeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailPredictionServer is the server API for EmailPrediction service.
// All implementations must embed UnimplementedEmailPredictionServer
// for forward compatibility.
type EmailPredictionServer interface {
	CategorizeEmail(context.Context, *EmailRequest) (*CategoryResponse, error)
	BatchCategorizeEmail(context.Context, *BatchEmailRequest) (*BatchCategoryResponse, error)
	mustEmbedUnimplementedEmailPredictionServer()
}

// UnimplementedEmailPredictionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailPredictionServer struct{}

func (UnimplementedEmailPredictionServer) CategorizeEmail(context.Context, *EmailRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategorizeEmail not implemented")
}
func (UnimplementedEmailPredictionServer) BatchCategorizeEmail(context.Context, *BatchEmailRequest) (*BatchCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCategorizeEmail not implemented")
}
func (UnimplementedEmailPredictionServer) mustEmbedUnimplementedEmailPredictionServer() {}
func (UnimplementedEmailPredictionServer) testEmbeddedByValue()                         {}

// UnsafeEmailPredictionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailPredictionServer will
// result in compilation errors.
type UnsafeEmailPredictionServer interface {
	mustEmbedUnimplementedEmailPredictionServer()
}

func RegisterEmailPredictionServer(s grpc.ServiceRegistrar, srv EmailPredictionServer) {
	// If the following call pancis, it indicates UnimplementedEmailPredictionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailPrediction_ServiceDesc, srv)
}

func _EmailPrediction_CategorizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailPredictionServer).CategorizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailPrediction_CategorizeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailPredictionServer).CategorizeEmail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailPrediction_BatchCategorizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailPredictionServer).BatchCategorizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailPrediction_BatchCategorizeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailPredictionServer).BatchCategorizeEmail(ctx, req.(*BatchEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailPrediction_ServiceDesc is the grpc.ServiceDesc for EmailPrediction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailPrediction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inboxpert.ml.service.EmailPrediction",
	HandlerType: (*EmailPredictionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CategorizeEmail",
			Handler:    _EmailPrediction_CategorizeEmail_Handler,
		},
		{
			MethodName: "BatchCategorizeEmail",
			Handler:    _EmailPrediction_BatchCategorizeEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ml_service.proto",
}
