// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: email_categorization_service.proto

package emailcategorization

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CategorizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email *Email `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *CategorizeRequest) Reset() {
	*x = CategorizeRequest{}
	mi := &file_email_categorization_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategorizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategorizeRequest) ProtoMessage() {}

func (x *CategorizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_email_categorization_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategorizeRequest.ProtoReflect.Descriptor instead.
func (*CategorizeRequest) Descriptor() ([]byte, []int) {
	return file_email_categorization_service_proto_rawDescGZIP(), []int{0}
}

func (x *CategorizeRequest) GetEmail() *Email {
	if x != nil {
		return x.Email
	}
	return nil
}

type CategorizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CategoryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CategorizeResponse) Reset() {
	*x = CategorizeResponse{}
	mi := &file_email_categorization_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategorizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategorizeResponse) ProtoMessage() {}

func (x *CategorizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_email_categorization_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategorizeResponse.ProtoReflect.Descriptor instead.
func (*CategorizeResponse) Descriptor() ([]byte, []int) {
	return file_email_categorization_service_proto_rawDescGZIP(), []int{1}
}

func (x *CategorizeResponse) GetResult() *CategoryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type BatchCategorizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emails []*Email `protobuf:"bytes,1,rep,name=emails,proto3" json:"emails,omitempty"`
}

func (x *BatchCategorizeRequest) Reset() {
	*x = BatchCategorizeRequest{}
	mi := &file_email_categorization_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCategorizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCategorizeRequest) ProtoMessage() {}

func (x *BatchCategorizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_email_categorization_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCategorizeRequest.ProtoReflect.Descriptor instead.
func (*BatchCategorizeRequest) Descriptor() ([]byte, []int) {
	return file_email_categorization_service_proto_rawDescGZIP(), []int{2}
}

func (x *BatchCategorizeRequest) GetEmails() []*Email {
	if x != nil {
		return x.Emails
	}
	return nil
}

type BatchCategorizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CategoryResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchCategorizeResponse) Reset() {
	*x = BatchCategorizeResponse{}
	mi := &file_email_categorization_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCategorizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCategorizeResponse) ProtoMessage() {}

func (x *BatchCategorizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_email_categorization_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCategorizeResponse.ProtoReflect.Descriptor instead.
func (*BatchCategorizeResponse) Descriptor() ([]byte, []int) {
	return file_email_categorization_service_proto_rawDescGZIP(), []int{3}
}

func (x *BatchCategorizeResponse) GetResults() []*CategoryResult {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_email_categorization_service_proto protoreflect.FileDescriptor

var file_email_categorization_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x70, 0x65, 0x72, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x62,
	0x6f, 0x78, 0x70, 0x65, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x62,
	0x0a, 0x12, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x70, 0x65, 0x72, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x5d, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x70, 0x65, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x69, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x70, 0x65, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x32, 0xbe, 0x02, 0x0a,
	0x1a, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0f,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x37, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x70, 0x65, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x70, 0x65, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3c,
	0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x70, 0x65, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x69,
	0x6e, 0x62, 0x6f, 0x78, 0x70, 0x65, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5b, 0x5a,
	0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x6d, 0x69,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x72, 0x69, 0x69, 0x2f, 0x69, 0x6e, 0x62, 0x6f, 0x58, 0x70, 0x65,
	0x72, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_email_categorization_service_proto_rawDescOnce sync.Once
	file_email_categorization_service_proto_rawDescData = file_email_categorization_service_proto_rawDesc
)

func file_email_categorization_service_proto_rawDescGZIP() []byte {
	file_email_categorization_service_proto_rawDescOnce.Do(func() {
		file_email_categorization_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_email_categorization_service_proto_rawDescData)
	})
	return file_email_categorization_service_proto_rawDescData
}

var file_email_categorization_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_email_categorization_service_proto_goTypes = []any{
	(*CategorizeRequest)(nil),       // 0: inboxpert.services.categorization.v1.CategorizeRequest
	(*CategorizeResponse)(nil),      // 1: inboxpert.services.categorization.v1.CategorizeResponse
	(*BatchCategorizeRequest)(nil),  // 2: inboxpert.services.categorization.v1.BatchCategorizeRequest
	(*BatchCategorizeResponse)(nil), // 3: inboxpert.services.categorization.v1.BatchCategorizeResponse
	(*Email)(nil),                   // 4: inboxpert.services.categorization.v1.Email
	(*CategoryResult)(nil),          // 5: inboxpert.services.categorization.v1.CategoryResult
}
var file_email_categorization_service_proto_depIdxs = []int32{
	4, // 0: inboxpert.services.categorization.v1.CategorizeRequest.email:type_name -> inboxpert.services.categorization.v1.Email
	5, // 1: inboxpert.services.categorization.v1.CategorizeResponse.result:type_name -> inboxpert.services.categorization.v1.CategoryResult
	4, // 2: inboxpert.services.categorization.v1.BatchCategorizeRequest.emails:type_name -> inboxpert.services.categorization.v1.Email
	5, // 3: inboxpert.services.categorization.v1.BatchCategorizeResponse.results:type_name -> inboxpert.services.categorization.v1.CategoryResult
	0, // 4: inboxpert.services.categorization.v1.EmailCategorizationService.CategorizeEmail:input_type -> inboxpert.services.categorization.v1.CategorizeRequest
	2, // 5: inboxpert.services.categorization.v1.EmailCategorizationService.BatchCategorizeEmails:input_type -> inboxpert.services.categorization.v1.BatchCategorizeRequest
	1, // 6: inboxpert.services.categorization.v1.EmailCategorizationService.CategorizeEmail:output_type -> inboxpert.services.categorization.v1.CategorizeResponse
	3, // 7: inboxpert.services.categorization.v1.EmailCategorizationService.BatchCategorizeEmails:output_type -> inboxpert.services.categorization.v1.BatchCategorizeResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_email_categorization_service_proto_init() }
func file_email_categorization_service_proto_init() {
	if File_email_categorization_service_proto != nil {
		return
	}
	file_email_categorization_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_email_categorization_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_email_categorization_service_proto_goTypes,
		DependencyIndexes: file_email_categorization_service_proto_depIdxs,
		MessageInfos:      file_email_categorization_service_proto_msgTypes,
	}.Build()
	File_email_categorization_service_proto = out.File
	file_email_categorization_service_proto_rawDesc = nil
	file_email_categorization_service_proto_goTypes = nil
	file_email_categorization_service_proto_depIdxs = nil
}
